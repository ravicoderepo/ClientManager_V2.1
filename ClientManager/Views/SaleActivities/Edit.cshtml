@model DBOperation.SaleActivity

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    var currentUser = (ClientManager.Models.UserDetails)Session["UserDetails"];
    string[] superroles = { "Super User", "Sales Engineer", "Sales Manager" };
}
<style>
    textarea {
        width: 100% !important;
        border: 1px solid #ced4da !important;
        border-radius: .25rem !important;
        padding: .375rem .75rem !important;
    }
</style>
<link rel="stylesheet" href="@Url.Content("//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css")">

<div class="content-wrapper">

    <!-- Content Header (Page header) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1>Sale Activity</h1>
                </div>
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item"><a href="../List">Sales</a></li>
                        <li class="breadcrumb-item active">Edit</li>
                    </ol>
                </div>
            </div>
        </div><!-- /.container-fluid -->
    </section>

    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <!-- left column -->
                <div class="col-md-12">
                    <!-- jquery validation -->
                    <div class="card card-primary">
                        <div class="card-header">
                            <h3 class="card-title">Sales Details </h3>
                        </div>
                        <!-- /.card-header -->
                        <!-- form start -->
                        <form id="quickForm">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="status">Call Date</label>
                                            <div class="input-group date" data-target-input="nearest">
                                                @Html.HiddenFor(model => model.Id)
                                                @Html.EditorFor(model => model.SaleDate, new { htmlAttributes = new { @class = "form-control datetimepicker-input", @id = "txtSaleDate", @name = "saleDate" } })
                                                <div class="input-group-append" data-target="#txtSaleDate" data-toggle="datetimepicker">
                                                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="status">Status</label>
                                            @Html.DropDownList("Status", null, htmlAttributes: new { @class = "form-control select2", @id = "ddlStatus", @onChange = "fnToggleInvoiceFields()" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="status">Representative</label>
                                            @Html.DropDownList("Representative", null, htmlAttributes: new { @class = "form-control select2", @id = "ddlRepresentative", @disabled = "disabled" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="status">Customer Name</label>
                                            @Html.EditorFor(model => model.ClientName, new { htmlAttributes = new { @class = "form-control", @id = "txtClientName", @name = "clientName" } })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="status">Customer Email</label>
                                            <input id="hdnClientEmail" type="hidden" />
                                            @Html.EditorFor(model => model.ClientEmail, new { htmlAttributes = new { @class = "form-control", @id = "txtClientEmail", @name = "clientEmail", @type = "email" } })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="status">Customer Phone No.</label>
                                            <input id="hdnClientPhoneNo" type="hidden" />
                                            @Html.EditorFor(model => model.ClientPhoneNo, new { htmlAttributes = new { @class = "form-control", @id = "txtClientPhoneNo", @name = "clientPhoneNo" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="status">Product Name</label>
                                            @*@Html.DropDownList("ProductName", null, htmlAttributes: new { @class = "form-control select2", @id = "ddlProductName" })*@
                                            @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control", @id = "txtProductName", @name = "productName" } })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="status">Capacity</label>
                                            @Html.EditorFor(model => model.Capacity, new { htmlAttributes = new { @class = "form-control allow_numeric", @id = "txtCapacity" } })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="status">Unit</label>
                                            @*@Html.EditorFor(model => model.Unit, new { htmlAttributes = new { @class = "form-control", @id = "txtUnit" } })*@
                                            @Html.DropDownList("Unit", null, htmlAttributes: new { @class = "form-control select2", @id = "ddlUnit" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="recentCallDate">Recent Call Date</label>
                                            <div class="input-group date" id="recentCallDate" data-target-input="nearest">
                                                @Html.EditorFor(model => model.RecentCallDate, new { htmlAttributes = new { @class = "form-control datetimepicker-input", @id = "txtRecentCallDate" } })
                                                <div class="input-group-append" data-target="#txtRecentCallDate" data-toggle="datetimepicker">
                                                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="NoOfFollowUps">No. Of FollowUps</label>
                                            @Html.EditorFor(model => model.NoOfFollowUps, new { htmlAttributes = new { @class = "form-control", @id = "txtNoOfFollowUps", @disabled = "disabled" } })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="anticipatgedClosingDate">Follow-up Call Date</label>
                                            <div class="input-group date" id="anticipatgedClosingDate" data-target-input="nearest">
                                                @Html.EditorFor(model => model.AnticipatedClosingDate, new { htmlAttributes = new { @class = "form-control datetimepicker-input", @id = "txtAnticipatedClosingDate" } })
                                                <div class="input-group-append" data-target="#txtAnticipatedClosingDate" data-toggle="datetimepicker">
                                                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                                <div class="row" id="pnlInvoice" style="display:none">
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="txtInvoiceNo">Invoice No.</label>
                                            @Html.EditorFor(model => model.InvoiceNo, new { htmlAttributes = new { @class = "form-control", @id = "txtInvoiceNo" } })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="txtInvoiceAmount">Invoice Amount</label>
                                            @Html.EditorFor(model => model.InvoiceAmount, new { htmlAttributes = new { @class = "form-control allow_decimal", @id = "txtInvoiceAmount", @style = "text-align:right !important" } })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="DateOfClosing">Closing Date</label>
                                            <div class="input-group date" id="recentCallDate" data-target-input="nearest">
                                                @Html.EditorFor(model => model.DateOfClosing, new { htmlAttributes = new { @class = "form-control datetimepicker-input", @id = "txtClosingDate" } })
                                                <div class="input-group-append" data-target="#txtClosingDate" data-toggle="datetimepicker">
                                                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="Remarks">Remarks (Current)</label>
                                            <br />

                                            <div>@Html.Raw(Model.Remarks)</div>
                                            @*@Html.TextAreaFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control text-box multi-line", @id = "lblRemarks", @readonly = "readonly" } })*@

                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="Remarks">Remarks</label>

                                            @Html.TextAreaFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control", @id = "txtRemarks" } })

                                        </div>
                                    </div>
                                </div>
                                <!-- /.card-body -->
                                <div class="card-footer">
                                    <button type="button" class="btn btn-primary" onclick="javascript:location.href='@Url.Action("Create", "SaleActivities")'"><i class="fa fa-plus"></i>New</button>
                                    @if (currentUser.UserRoles.Any(wh => superroles.Contains(wh.RoleName)))
                                    {
                                        if (Model.Status != 6)
                                        {
                                            <button type="submit" class="btn btn-primary">Submit</button> <button type="reset" onclick="javascript:location.reload()" class="btn btn-danger">Cancel</button>
                                        }
                                    }

                                    <button type="button" class="btn btn-outline-secondary" onclick="javascript:history.go(-1)" id="btnBack">Back to List</button>
                                </div>
                            </div>
                        </form>
                    </div>
                    <!-- /.card -->
                </div>

                <!--/.col (left) -->
                <!-- right column -->
                <div class="col-md-6">

                </div>
                <!--/.col (right) -->
            </div>
            <!-- /.row -->
        </div><!-- /.container-fluid -->
    </section>
    <!-- /.content -->
</div>


<script>
    $(window).on('load', function () {
    //Date picker
    $('#txtSaleDate').datetimepicker({
    format: 'DD/MM/YYYY'
    });
    $('#txtAnticipatedClosingDate').datetimepicker({
    format: 'DD/MM/YYYY'
    });
    $('#txtClosingDate').datetimepicker({
    format: 'DD/MM/YYYY'
    });
    $('#txtRecentCallDate').datetimepicker({
    format: 'DD/MM/YYYY'
    });
    $("#txtSaleDate").attr('readonly', 'readonly');
    $('#Remarks').val('');
    //$('#lblRemarks').val().Replace("\r\n", "\n").Replace("\n", "<br />");;

    if ($('#ddlStatus').val() == "6") {
    $('#pnlInvoice').show();
    }
    else {
    $('#pnlInvoice').hide();
    }

    if ('@ViewBag.AccessLevel' == "View") {
    $('#quickForm :input').each(function () {

    if ($(this).attr('Id') != 'btnBack') {

    $(this).prop('disabled', true);
    }
    });
    }
    });

    $(document).ready(function () {

    if ($('#ddlStatus').val() == "6") {
    $('#pnlInvoice').show();
    }
    else {
    $('#pnlInvoice').hide();
    }
    });

    $(function () {
    //
    $.validator.setDefaults({
    submitHandler: function () {

    // alert("Form successful submitted!");

    fnSubmitSaleDetails();

    }
    });
    $('#quickForm').validate({

    rules: {
    saleDate: {
    required: true,
    },
    clientName: {
    required: true,
    },
    },
    messages: {
    saleDate: {
    required: "Please enter a email address",
    },
    clientName: {
    required: "Please provide a password",
    },
    },
    errorElement: 'span',
    errorPlacement: function (error, element) {
    error.addClass('invalid-feedback');
    element.closest('.form-group').append(error);
    },
    highlight: function (element, errorClass, validClass) {
    $(element).addClass('is-invalid');
    },
    unhighlight: function (element, errorClass, validClass) {
    $(element).removeClass('is-invalid');
    }
    });
    });


    function fnToggleInvoiceFields() {

    //6-Closed
    if ($('#ddlStatus').val() == "6") {
    $('#pnlInvoice').show();

    $('#txtClosingDate').datetimepicker({
    format: 'DD/MM/YYYY',
    defaultDate: new Date()
    });

    }
    else {
    $('#pnlInvoice').hide();
    $('#txtClosingDate').val('');
    }
    }

    function fnSubmitSaleDetails() {
        var email = ($('#hdnClientEmail').val() != '' && $('#hdnClientEmail').val() != undefined) ? $('#hdnClientEmail').val() : $("#txtClientEmail").val();
        var phone = ($('#hdnClientPhoneNo').val() != '' && $('#hdnClientPhoneNo').val() != undefined) ? $('#hdnClientPhoneNo').val() : $("#txtClientPhoneNo").val();

        var saleData = {
            Id: $('#Id').val(),
            SaleDate: $('#txtSaleDate').val(),
            SalesRepresentativeId: $('#ddlRepresentative').val(),
            Status: $('#ddlStatus').val(),
            ClientName: $('#txtClientName').val(),
            ClientEmail: email,//$('#txtClientEmail').val(),
            ClientPhoneNo: phone,//$('#txtClientPhoneNo').val(),
            ProductName: $('#txtProductName').val(),
            Capacity: $('#txtCapacity').val(),
            Unit: $('#ddlUnit').val(),
            RecentCallDate: $('#txtRecentCallDate').val(),
            AnticipatedClosingDate: $('#txtAnticipatedClosingDate').val(),
            NoOfFollowUps: $('#txtNoOfFollowUps').val(),
            InvoiceNo: $('#txtInvoiceNo').val(),
            InvoiceAmount: $('#txtInvoiceAmount').val(),
            DateOfClosing: $('#txtClosingDate').val(),
            Remarks: $('#Remarks').val()
        };

        $.ajax({
            type: "POST",
            url: "/SaleActivities/Edit",
            data: JSON.stringify(saleData),
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                if (data.status == "Success") {
                    alert(data.message);
                    window.location.href = data.redirectURL;
                }
                else {
                    alert(data.message);
                    return false;
                }

            },
            error: function () {
                alert("Error occured!!  " + data.message);
                return false;
            }
        });
    }
    $(".allow_numeric").on("input", function (evt) {
        var self = $(this);
        self.val(self.val().replace(/\D/g, ""));
        if ((evt.which < 48 || evt.which > 57)) {
            evt.preventDefault();
        }
    }).on('paste', function (event) {
        event.preventDefault();
    });

    $('.allow_decimal').keypress(function (event) {
    if (((event.which != 46 || (event.which == 46 && $(this).val() == '')) ||
    $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
    event.preventDefault();
    }
    }).on('paste', function (event) {
    event.preventDefault();
    });
    function fnModeOfPaymentChange() {

    $("input[name=ModeOfPayment]").val($('#ddlModeOfPayment').val());
    }
    $("#mnuSalesList").addClass("active");
    var parentMenu = $("#mnuSalesList").parent().parent().parent();

    parentMenu.attr("class", "nav-item menu-is-opening menu-open");
    parentMenu.find("ul").each(function () {

        $(this).attr("style", "display:block");
    });

    let hideEmail = function (email) {
        
        if (email != undefined && email != '') {
            $("#txtClientEmail").attr('readonly', true);
            return email.replace(/(.{2})(.*)(?=@@)/,
                function (gp1, gp2, gp3) {
                    for (let i = 0; i < gp3.length; i++) {
                        gp2 += "*";
                    } return gp2;
                });
        }
    };

    $(function () {
        
        //$("#txtClientPhoneNo").val('');
        //$("#hdnClientPhoneNo").val('');
        //$("#hdnClientEmail").val('');
        //$("#txtClientEmail").val('');

        $("#txtClientName").autocomplete({
            minLength: 4, autoFocus: true,

            source: function (request, response) {
                var itemnamecodes = new Array();
                $.ajax({
                    async: false, cache: false,
                    //type: "POST",
                    url: "@(Url.Action("GetItemCode", "SaleActivities"))",
                    data: { "term": request.term },
                    success: function (data) {
                        for (var i = 0; i < data.length; i++) {
                            itemnamecodes[i] = { label: data[i].Key, Id: data[i].Value };
                        }
                    }
                });

                $("#txtClientPhoneNo").attr('readonly', false);
                $("#txtClientPhoneNo").val('');
                $("#hdnClientPhoneNo").val('');
                $("#txtClientEmail").attr('readonly', false);
                $("#txtClientEmail").val('');
                $("#hdnClientEmail").val('');

                response(itemnamecodes);
            },
            select: function (event, ui) {
                $.ajax({
                    cache: false, async: false, type: "POST",
                    url: "@(Url.Action("GetItemDetails", "SaleActivities"))",
                    data: { "id": ui.item.Id },
                    success: function (data) {
                        var item = data[0];
                        // $("#txtClientEmail").val(item.Email.replace(/[a-z]/g, "X"));
                        var custPhoneNumber = item.PhoneNo;
                        var custEmail = item.Email;
                        $("#hdnClientEmail").val(item.Email);
                        $("#hdnClientPhoneNo").val(item.PhoneNo);
                        if (custPhoneNumber != undefined && custPhoneNumber != '')
                            $("#txtClientPhoneNo").val("**********");

                        $("#txtClientEmail").val(hideEmail(custEmail));

                        if ($("#txtClientPhoneNo").val() != '') {
                            $("#txtClientPhoneNo").attr('readonly', true);
                        }
                        else {

                            $("#txtClientPhoneNo").attr('readonly', false);
                            $("#hdnClientPhoneNo").val('');
                        }

                        if ($("#txtClientEmail").val() != '') {
                            $("#txtClientEmail").attr('readonly', true);
                        }
                        else {

                            $("#txtClientEmail").attr('readonly', false);
                            $("#hdnClientEmail").val('');
                        }

                        $("#txtClientName").val(item.Name);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        $("#txtClientPhoneNo").attr('readonly', false);
                        alert('Failed to retrieve Item.');
                    }
                });
            }
        });
    });
    if ($("#txtClientPhoneNo").val() != undefined && $("#txtClientPhoneNo").val() != '') {
        $("#hdnClientPhoneNo").val($("#txtClientPhoneNo").val());
        $("#txtClientPhoneNo").val("**********");
        $("#txtClientPhoneNo").attr('readonly', true);
    }
    hideEmail($("#txtClientEmail").val());
    
</script>
